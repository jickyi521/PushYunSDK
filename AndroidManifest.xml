<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.augmentum.pushyun"
    android:versionCode="1"
    android:versionName="1.0" >

    <!-- GCM requires Android SDK version 2.2 (API level 8) or above. -->
    <!--
         The targetSdkVersion is optional, but it's always a good practice
         to target higher versions.
    -->
    <uses-sdk
        android:minSdkVersion="5"
        android:targetSdkVersion="16" />

    <!-- GCM connects to Google Services. -->
    <uses-permission android:name="android.permission.INTERNET" />

    <!-- GCM requires a Google account. -->
    <uses-permission android:name="android.permission.GET_ACCOUNTS" />

    <!-- Keeps the processor from sleeping when a message is received. -->
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
    <uses-permission android:name="android.permission.BLUETOOTH" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

    <!--
     Creates a custom permission so only this app can receive its messages.

     NOTE: the permission *must* be called PACKAGE.permission.C2D_MESSAGE,
           where PACKAGE is the application's package name.
    -->
    <permission
        android:name="com.augmentum.pushyun.permission.C2D_MESSAGE"
        android:protectionLevel="signature" />

    <uses-permission android:name="com.augmentum.pushyun.permission.C2D_MESSAGE" />

    <!-- This app has permission to register and receive data message. -->
    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
    <uses-permission android:name="android.permission.VIBRATE" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE" />

    <application
        android:name=".test.PushSDKApp"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >
        <activity
            android:name=".test.MainActivity"
            android:label="@string/title_activity_push_main" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!--
          BroadcastReceiver that will receive intents from GCM
          services and handle them to the custom IntentService.

          The com.google.android.c2dm.permission.SEND permission is necessary
          so only GCM services can send data messages for the app.
        -->
        <receiver
            android:name=".broadcast.CoreBroadcastReceiver"
            android:permission="com.google.android.c2dm.permission.SEND" >
            <intent-filter>

                <!-- Receives the actual messages. -->
                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                <!-- Receives the gcm registration id. -->
                <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
                <!-- Receives the a2dm registration id. -->

                <category android:name="com.augmentum.pushyun" />
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
                <action android:name="android.intent.action.USER_PRESENT" />
            </intent-filter>
        </receiver>

        <!--
          Application-specific subclass of GCMBaseIntentService that will
          handle received messages.

          By default, it must be named .GCMIntentService, unless the
          application uses a custom BroadcastReceiver that redefines its name.
        -->
        <service android:name=".test.MsgIntentService" />
        <service android:name=".service.PushA2DMService" />

        <!--
        TODO
        To run the service in a separate process, simply add the “android:process” attribute to the service element 
      and provide a name for the process. If the name starts with a colon, the process will be private to your application 
      <service android:name="com.augmentum.pushyun.service.PushService" android:process=":PushServicProcess"/>
      Note that when the service runs in a separate process it will create a separate instance of the application
      when the service is started. This means that your application’s onCreate() method will be called again 
      in another context. For most applications this is not an issue, but if the onCreate method invokes any code 
      that should only be called once (such as analytics code that changes state outside of the application) 
      you will want to ensure that it only runs in one of the processes. 
        -->

        <service android:name=".service.PushService" />

        <!--
          Application-specific subclass of GCMBaseIntentService that will
          handle received messages.

          By default, it must be named .GCMIntentService, unless the
          application uses a custom BroadcastReceiver that redefines its name.
        -->
        <service android:name=".test.PushMsgIntentService" />

        <activity android:name=".test.gcm.GCMTestActivity" >
        </activity>
    </application>

</manifest>